/*
 * Copyright (c) 2019, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <vector>
#include <string>
#include <ogrsf_frmts.h>

#include <gtest/gtest.h>
#include <cuspatial/point_in_polygon.hpp>
#include "pip_util.h"

#include <tests/utilities/legacy/column_wrapper.cuh>
#include <tests/utilities/legacy/cudf_test_utils.cuh>
#include <tests/utilities/legacy/cudf_test_fixtures.h>

struct PIPToy : public GdfTest 
{
    uint32_t point_len=0;

    double  *x=NULL;
    double  *y=NULL;
    
    cuspatial::polygons<double> h_polygon;
    OGRPolygon *ogr_poly=NULL;  
    
    uint32_t set_initialize()
    {          
        h_polygon.num_group=1;
        h_polygon.num_feature=1;
        h_polygon.num_ring=20;
        uint32_t num_vertex=215;
        h_polygon.num_vertex=num_vertex+h_polygon.num_ring;
        h_polygon.feature_position=new uint32_t[h_polygon.num_feature]{h_polygon.num_ring};
        h_polygon.ring_position=new uint32_t[h_polygon.num_ring]{118, 123, 128, 133, 138, 143, 148, 153, 158, 163, 168, 173, 178, 183, 188, 193, 198, 203, 208, 215};

        //double *poly_x=new double[num_vertex]  {-2.89696152,-2.89680356,-2.89576932,-2.8960177,-2.89592097,-2.89586889,-2.89566787,-2.89526364,-2.89538523,-2.89575379,-2.89590328,-2.89575279,-2.89608777,-2.89624248,-2.89614507,-2.8965334,-2.89663418,-2.89681331,-2.89723478,-2.89667092,-2.89716492,-2.89769256,-2.89737449,-2.89727654,-2.8971284,-2.89725926,-2.8973997,-2.89742863,-2.89767339,-2.89776939,-2.89806537,-2.89829139,-2.89800107,-2.8980406,-2.89824146,-2.89851315,-2.89875311,-2.89895003,-2.8985042,-2.89853244,-2.89872794,-2.89886929,-2.89867318,-2.89871701,-2.89892449,-2.89913239,-2.89892659,-2.8991302,-2.89925255,-2.89946433,-2.89934121,-2.89944746,-2.89931974,-2.89921423,-2.89908499,-2.89928219,-2.89953641,-2.89970004,-2.89978964,-2.90005325,-2.89996533,-2.90018537,-2.8999968,-2.90041039,-2.89991369,-2.89966612,-2.89952543,-2.89927548,-2.89921126,-2.89900323,-2.89906513,-2.89885603,-2.89877814,-.89916043,-2.89895035,-2.89856584,-2.89849842,-2.89904116,-2.89891998,-2.89852274,-2.89826118,-2.89806074,-2.89850851,-2.89847249,-2.89853076,-2.89902413,-2.89891134,-2.89863405,-2.89838915,-2.89845201,-2.89831306,-2.89829183,-2.89839933,-2.89828532,-2.89810218,-2.89794319,-2.89801826,-2.89756308,-2.89760522,-2.89763672,-2.89774609,-2.897486,-2.89753571,-2.89751786,-2.89737669,-2.89732683,-2.89728267,-2.89731025,-2.89745889,-2.89746662,-2.89738341,-2.89748138,-2.89736189,-2.89730446,-2.89677063,-2.89718722,-2.89682198,-2.89696152,-2.89653851,-2.89670794,-2.89678136,-2.89661193,-2.89653851,-2.89641764,-2.89628523,-2.89620923,-2.89634164,-2.89641764,-2.89652226,-2.89644716,-2.8965347,-2.89660979,-2.89652226,-2.8964031,-2.89632587,-2.89644833,-2.89652556,-2.8964031,-2.89830517,-2.89822502,-2.89826084,-2.89834098,-2.89830517,-2.8988309,-2.89889512,-2.89880596,-2.89874173,-2.8988309,-2.89939574,-2.89933257,-2.89942753,-2.8994907,-2.89939574,-2.89793026,-2.89805826,-2.89794561,-2.89781761,-2.89793026,-2.89852269,-2.89866373,-2.89874571,-2.89860467,-2.89852269,-2.89856659,-2.89871267,-2.89880257,-2.89865574,-2.89856659,-2.89897291,-2.89919209,-2.89927542,-2.89905625,-2.89897291,-2.89887174,-2.89900248,-2.89879815,-2.89866741,-2.89887174,-2.89926254,-2.89947432,-2.89960202,-2.89938951,-2.89926254,-2.89824756,-2.89846008,-2.89858778,-2.89837527,-2.89824756,-2.89892579,-2.8992084,-2.89931375,-2.8990293,-2.89892579,-2.89941368,-2.89959438,-2.89997225,-2.89979365,-2.89941368,-2.89617789,-2.89598807,-2.89605035,-2.89624031,-2.89617789,-2.89590565,-2.89595693,-2.8961224,-2.89607038,-2.89590565,-2.89819946,-2.8980875,-2.89830464,-2.89837714,-2.89826478,-2.89818199,-2.89819946};
   
        double *poly_x=new double[num_vertex]{-2.8969615171832186, -2.8968219756834515, -2.8971872189633885, -2.8967706279407195, -2.897304463072689, -2.8973618945635327, -2.897481378353603, -2.8973834063087125, -2.897466623638428, -2.897458893951396, -2.897310249744374, -2.897282672870356, -2.89732682868858, -2.897376689957853, -2.8975178576220078, -2.8975357099458647, -2.8974860025542877, -2.8977460851235515, -2.8976367213321144, -2.8976052181313263, -2.897563083526369, -2.8980182561841534, -2.897943193741743, -2.898102180575632, -2.8982853178105357, -2.8983993289240995, -2.898291832264916, -2.8983130611113377, -2.898452011705439, -2.898389154780065, -2.898634047669524, -2.8989113433461755, -2.8990241295344807, -2.8985307565193064, -2.8984724904983956, -2.8985085091617933, -2.8980607388861155, -2.8982611765394957, -2.898522735479487, -2.8989199758580573, -2.8990411649484495, -2.898498422544736, -2.898565840307701, -2.898950346419798, -2.8991604294866606, -2.898778143247781, -2.8988560252021736, -2.899065128864158, -2.8990032280756988, -2.899211262187175, -2.899275484022475, -2.8995254349223027, -2.8996661159104113, -2.8999136879433585, -2.9004103871662608, -2.899996796562549, -2.9001853686362917, -2.8999653338962843, -2.900053252874674, -2.899789642479445, -2.8997000412601137, -2.8995364100151586, -2.899282186331956, -2.899084990425628, -2.899214232252729, -2.8993197439022, -2.89944746138753, -2.8993412104074685, -2.899464333629, -2.899252551020813, -2.899130195552493, -2.8989265901382155, -2.899132393826448, -2.898924490674319, -2.8987170144602206, -2.8986731755869717, -2.8988692879229037, -2.8987279443906333, -2.898532440716018, -2.898504200866546, -2.8989500306685403, -2.898753113648931, -2.8985131452888466, -2.898241457665495, -2.898040597070204, -2.8980010673406653, -2.8982913885389747, -2.8980653693282505, -2.8977693876085033, -2.897673390392496, -2.89742863294684, -2.8973997007645926, -2.897259261721563, -2.897128397708451, -2.8972765420634, -2.8973744931919017, -2.897692560730482, -2.8971649155962864, -2.8966709249683458, -2.8972347766072106, -2.896813311188011, -2.896634179455792, -2.896533397082955, -2.8961450681339427, -2.8962424831620854, -2.896087772675016, -2.895752789706252, -2.8959032757138754, -2.895753793511332, -2.895385227384336, -2.8952636422330116, -2.8956678748971303, -2.895868893197451, -2.895920965895584, -2.896017696083829, -2.8957693243927207, -2.8968035594885935, -2.8969615171832186, -2.8965385114341053, -2.8966119286775163, -2.8967813563259823, -2.896707938896468, -2.8965385114341053, -2.8964176358470466, -2.896341638516586, -2.8962092290140626, -2.8962852261977745, -2.8964176358470466, -2.896522256441163, -2.8966097919465725, -2.8965346963950775, -2.8964471609874956, -2.896522256441163, -2.8964031000704313, -2.8965255622593515, -2.89644832924539, -2.896325867196766, -2.8964031000704313, -2.898305165033383, -2.898340982064486, -2.8982608375766885, -2.8982250224683983, -2.898305165033383, -2.8988308966760874, -2.898741734285483, -2.898805961028674, -2.8988951216214054, -2.8988308966760874, -2.899395735996552, -2.899490696941123, -2.899427534735944, -2.8993325738794895, -2.899395735996552, -2.897930255888796, -2.8978176068896024, -2.897945611016643, -2.8980582583479735, -2.897930255888796, -2.8985226932852988, -2.8986046706797413, -2.8987457079203125, -2.898663730355045, -2.8985226932852988, -2.898566589649907, -2.898655742846787, -2.8988025688403116, -2.89871266691434, -2.898566589649907, -2.8989729063780607, -2.8990562462539833, -2.8992754157891074, -2.8991920850601365, -2.8989729063780607, -2.8988717401598625, -2.898667405789797, -2.898798153315284, -2.8990024786656163, -2.8988717401598625, -2.8992625377866212, -2.8993895054452485, -2.8996020239333413, -2.8994743167506036, -2.8992625377866212, -2.898247563170996, -2.8983752686912396, -2.8985877824612394, -2.898460076540791, -2.898247563170996, -2.8989257876681376, -2.8990292980118175, -2.8993137507759674, -2.8992084002311533, -2.8989257876681376, -2.8994136817063643, -2.8997936513238614, -2.8999722517636966, -2.899594375162479, -2.8994136817063643, -2.896177889363936, -2.8962403072910865, -2.8960503461765406, -2.8959880743825055, -2.896177889363936, -2.8959056522874707, -2.896070380263657, -2.89612239745198, -2.895956933936551, -2.8959056522874707, -2.898199462894988, -2.89818198507952, -2.8982647807044755, -2.898377138541921, -2.8983046367521244, -2.8980875036007054, -2.898199462894988};
   
        //double *poly_y=new double[num_vertex]  {53.2080029 , 53.20784552, 53.20821601, 53.20846566, 53.20850136,53.20844557, 53.20824797, 53.20839348, 53.20851572, 53.20838306,53.20853619, 53.20859332, 53.20893212, 53.20887648, 53.20877896,53.20863905, 53.20874005, 53.20867802, 53.20910651, 53.20930222,53.20980468, 53.20961733, 53.20929351, 53.20932814, 53.20917491,53.20913176, 53.20915273, 53.2091615 , 53.20940227, 53.2093673 ,53.20965875, 53.20957614, 53.20929049, 53.20927617, 53.20947979,53.20938291, 53.20962345, 53.20955265, 53.20910575, 53.20909574, 53.20929373, 53.20924341, 53.20904497, 53.20902908, 53.20923391,53.20915872, 53.20895514, 53.20888214, 53.20900482,53.20892906,53.20880549,53.20876693, 53.20863845, 53.20867655, 53.20854674,53.20847522, 53.20873156, 53.20867315, 53.20876183, 53.20866572,53.20857874, 53.20849681, 53.2083082 , 53.2081599 , 53.20766485,53.20775436, 53.20761447, 53.20770481, 53.20764102, 53.20771676,53.20777696, 53.20785171, 53.20777194, 53.20763745, 53.20742222,53.20755789, 53.20748442, 53.20728319, 53.2071659 , 53.20731542,53.2070656 , 53.20713939, 53.20759437, 53.20766907, 53.20767726,53.20817154, 53.20821257, 53.20794094, 53.2080299 , 53.20809289,53.20814292, 53.20819459, 53.20830147, 53.20834125, 53.2081615 ,53.20822005, 53.20829392, 53.20845906, 53.20854073, 53.20852925,53.20863953, 53.20873273, 53.2087827 , 53.20878823, 53.20876817,53.20878247, 53.20889068, 53.20892058, 53.20894014, 53.20895177,53.20898206, 53.20907741, 53.20912056, 53.2091094 , 53.20857002,53.20842135, 53.20805339, 53.2080029 , 53.20835333, 53.20829273,53.20836679, 53.20842739, 53.20835333, 53.20828674, 53.20833465,53.20825891, 53.20821099, 53.20828674, 53.20824891, 53.20817334,53.20814194, 53.20821751, 53.20824891, 53.20850133, 53.20842379,53.2083799 , 53.20845744, 53.20850133, 53.20938295, 53.20930256,53.20928962, 53.20937009,53.20938295, 53.20758115, 53.20764512,53.20767743, 53.20761338, 53.20758115, 53.20852066, 53.20845749,53.20842325, 53.20848641, 53.20852066, 53.20896176, 53.2090897 ,53.20913037, 53.20900234, 53.20896176, 53.20936692, 53.20931624,53.20939841, 53.2094491 , 53.20936692, 53.20851667, 53.2084637 ,53.20855255, 53.20860553, 53.20851667, 53.20798486, 53.207905  ,53.20798752, 53.20806783, 53.20798486, 53.20862385, 53.20875366,53.20882801, 53.20869776, 53.20862385, 53.20826628, 53.20819052,53.20831855, 53.20839477, 53.20826628, 53.20884835, 53.20877169,53.20889972, 53.20897638, 53.20884835, 53.20838757, 53.20828368,53.20838806, 53.2084899 , 53.20838757, 53.20783339, 53.20776767,53.20814442, 53.20821005, 53.20783339, 53.20869431, 53.20850274,53.20848043, 53.20867182, 53.20869431, 53.20853527, 53.20851727,53.20868277, 53.20870141, 53.20853527, 53.20880367, 53.20869108,53.20861339, 53.20868646, 53.20872659, 53.20873405, 53.20880367};
        
        double *poly_y=new double[num_vertex]{53.20800289884499, 53.208053389788496, 53.20842135252267, 53.20857002368384, 53.209109398536306, 53.20912056195497, 53.20907741283192, 53.20898205678003, 53.208951765672325, 53.20894013799854, 53.208920582643, 53.2088906766756, 53.20878247419491, 53.208768165418356, 53.20878822647577, 53.2087826984815, 53.208732733685814, 53.20863953406998, 53.2085292521724, 53.2085407259912, 53.208459062329744, 53.20829391706774, 53.20822005264046, 53.208161503328014, 53.20834125409694, 53.208301471292614, 53.20819459178728, 53.20814292382628, 53.20809288504692, 53.20802989561911, 53.20794094359639, 53.208212571453096, 53.20817153880755, 53.20767726162358, 53.20766907148797, 53.207594369580825, 53.20713938868273, 53.2070656046374, 53.20731541851711, 53.20716589834933, 53.20728319128771, 53.20748441833254, 53.20755789062257, 53.20742221983456, 53.20763745291265, 53.20777193903074, 53.2078517145116, 53.20777696482554, 53.207716755140765, 53.20764102445721, 53.20770481217856, 53.20761447175073, 53.20775435944958, 53.20766484519607, 53.20815990059132, 53.208308200839475, 53.2084968069217, 53.20857874257524, 53.2086657226697, 53.20876183051398, 53.20867315499189, 53.20873156171865, 53.208475222507474, 53.20854673648157, 53.20867655327967, 53.20863845180083, 53.20876693148069, 53.20880548811048, 53.20892905841608, 53.20900481780167, 53.20888214040138, 53.20895514074218, 53.20915872022463, 53.20923391038903, 53.2090290846874, 53.20904496664274, 53.2092434059695, 53.209293732942434, 53.20909573825323, 53.20910574942915, 53.20955265299739, 53.20962344515425, 53.20938290760062, 53.209479792035, 53.20927617377107, 53.209290494836466, 53.209576138882056, 53.20965874534804, 53.20936730046432, 53.20940227254913, 53.20916149923864, 53.2091527280283, 53.20913176242481, 53.20917490713276, 53.20932813524795, 53.20929350833104, 53.209617328514646, 53.20980468211665, 53.20930222189222, 53.20910650752253, 53.20867802172119, 53.20874004690763, 53.20863904814305, 53.208778964703846, 53.2088764833547, 53.20893212146531, 53.20859332242486, 53.20853618835662, 53.208383058490334, 53.20851572254482, 53.208393484873454, 53.20824796821819, 53.20844556654187, 53.208501357171066, 53.20846566184542, 53.20821601305573, 53.207845519294146, 53.20800289884499, 53.208353334221464, 53.208427391690314, 53.20836678795423, 53.208292730589825, 53.208353334221464, 53.208286735263016, 53.208210989147496, 53.208258908740774, 53.20833465494077, 53.208286735263016, 53.2082489126437, 53.208217510932045, 53.20814193793411, 53.208173339590594, 53.2082489126437, 53.20850132594471, 53.208457436229274, 53.20837990165003, 53.208423791286066, 53.20850132594471, 53.20938294789859, 53.20937009299446, 53.20928961511816, 53.2093025598756, 53.20938294789859, 53.20758115059623, 53.20761337525076, 53.207677432860805, 53.207645118280816, 53.20758115059623, 53.20852065946638, 53.20848641293483, 53.208423246573744, 53.208457493054944, 53.20852065946638, 53.20896175573971, 53.20900233684235, 53.20913036649484, 53.20908969539373, 53.20896175573971, 53.209366924777676, 53.2094490965933, 53.20939841251447, 53.20931624079589, 53.209366924777676, 53.208516668755834, 53.20860552828652, 53.208552553166555, 53.208463699392695, 53.208516668755834, 53.207984860937984, 53.2080678311986, 53.20798752179408, 53.207905001073755, 53.207984860937984, 53.20862385464954, 53.20869775896923, 53.2088280143123, 53.208753660381404, 53.20862385464954, 53.2082662829711, 53.20839476837686, 53.208318553714484, 53.208190523573926, 53.2082662829711, 53.20884834754733, 53.208976378995715, 53.20889971674279, 53.208771685522215, 53.20884834754733, 53.208387571290515, 53.208489895839385, 53.20838805905607, 53.20828368113454, 53.208387571290515, 53.207833392575026, 53.208210045594456, 53.2081444239797, 53.207767665825635, 53.207833392575026, 53.208694309619254, 53.208671816616906, 53.20848042816061, 53.20850274018251, 53.208694309619254, 53.2085352715681, 53.20870141073841, 53.20868277147581, 53.20851726714934, 53.2085352715681, 53.20880367453256, 53.208734050438224, 53.20872659441067, 53.20868646453325, 53.20861339004812, 53.208691075434444, 53.20880367453256};
        
        
        /*expected={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
           0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0,
           1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
           0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0,
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
        */
        
        h_polygon.x=new double[h_polygon.num_vertex];
        h_polygon.y=new double[h_polygon.num_vertex];
        assert(h_polygon.x!=NULL && h_polygon.y!=NULL);

        //populte h_polygon_vec for verification later
        ogr_poly=(OGRPolygon*)OGRGeometryFactory::createGeometry(wkbPolygon);
        assert(ogr_poly!=NULL);
        uint32_t rc=0, vc=0; 
        for (uint32_t r = 0; r < h_polygon.num_ring; r++) //for each ring
        {
            OGRLineString *ls=(OGRLinearRing*)OGRGeometryFactory::createGeometry(wkbLinearRing);
            uint32_t m = (r==0)?0:h_polygon.ring_position[r-1];
            uint32_t n=m;
            for (;m < h_polygon.ring_position[r]; m++) //for each line segment
            {
                ls->addPoint(poly_x[m],poly_y[m]);
                h_polygon.x[vc]=poly_x[m];
                h_polygon.y[vc]=poly_y[m];
                vc++;
            }
            ls->addPoint(poly_x[n],poly_y[n]);
            h_polygon.x[vc]=poly_x[n];
            h_polygon.y[vc]=poly_y[n];
            vc++;           
            ogr_poly->addRing(ls);
            rc++;
            printf("rc=%d m=%d vc=%d\n",rc,m,vc);
        }
        std::cout<<"rc="<<rc<<" vc="<<vc<<std::endl;
        delete[] poly_x;
        delete[] poly_y;
        
        for(uint32_t i=0;i<h_polygon.num_ring;i++)
            h_polygon.ring_position[i]+=(i+1);
        
        double bbox[4]{-2.9004103871662608, 53.2070656046374, -2.8952636422330116, 53.20980468211665};
        uint32_t dim_x=10,dim_y=10;
        point_len=dim_x*dim_y;
        x=new double[point_len];
        y=new double[point_len];
        assert(x!=NULL && y!=NULL);
        for(uint32_t i=0;i<dim_x;i++)
        {
            for(uint32_t j=0;j<dim_y;j++)
            {
                x[i*dim_y+j]=bbox[0]+(i*(bbox[2]-bbox[0])/dim_x);
                y[i*dim_y+j]=bbox[1]+(j*(bbox[3]-bbox[1])/dim_y);
            }
        }
        
        /*point_len=100;
        x=new double[point_len]{-2.9004103871662608, -2.9004103871662608, -2.9004103871662608, -2.9004103871662608, -2.9004103871662608, -2.9004103871662608, -2.9004103871662608, -2.9004103871662608, -2.9004103871662608, -2.9004103871662608, -2.8998957126729357, -2.8998957126729357, -2.8998957126729357, -2.8998957126729357, -2.8998957126729357, -2.8998957126729357, -2.8998957126729357, -2.8998957126729357, -2.8998957126729357, -2.8998957126729357, -2.899381038179611, -2.899381038179611, -2.899381038179611, -2.899381038179611, -2.899381038179611, -2.899381038179611, -2.899381038179611, -2.899381038179611, -2.899381038179611, -2.899381038179611, -2.898866363686286, -2.898866363686286, -2.898866363686286, -2.898866363686286, -2.898866363686286, -2.898866363686286, -2.898866363686286, -2.898866363686286, -2.898866363686286, -2.898866363686286, -2.8983516891929613, -2.8983516891929613, -2.8983516891929613, -2.8983516891929613, -2.8983516891929613, -2.8983516891929613, -2.8983516891929613, -2.8983516891929613, -2.8983516891929613, -2.8983516891929613, -2.897837014699636, -2.897837014699636, -2.897837014699636, -2.897837014699636, -2.897837014699636, -2.897837014699636, -2.897837014699636, -2.897837014699636, -2.897837014699636, -2.897837014699636, -2.897322340206311, -2.897322340206311, -2.897322340206311, -2.897322340206311, -2.897322340206311, -2.897322340206311, -2.897322340206311, -2.897322340206311, -2.897322340206311, -2.897322340206311, -2.8968076657129864, -2.8968076657129864, -2.8968076657129864, -2.8968076657129864, -2.8968076657129864, -2.8968076657129864, -2.8968076657129864, -2.8968076657129864, -2.8968076657129864, -2.8968076657129864, -2.8962929912196613, -2.8962929912196613, -2.8962929912196613, -2.8962929912196613, -2.8962929912196613, -2.8962929912196613, -2.8962929912196613, -2.8962929912196613, -2.8962929912196613, -2.8962929912196613, -2.8957783167263367, -2.8957783167263367, -2.8957783167263367, -2.8957783167263367, -2.8957783167263367, -2.8957783167263367, -2.8957783167263367, -2.8957783167263367, -2.8957783167263367, -2.8957783167263367};
        y=new double[point_len]{53.2070656046374, 53.207339512385325, 53.20761342013325, 53.207887327881174, 53.2081612356291, 53.208435143377024, 53.20870905112495, 53.20898295887287, 53.2092568666208, 53.20953077436872, 53.2070656046374, 53.207339512385325, 53.20761342013325, 53.207887327881174, 53.2081612356291, 53.208435143377024, 53.20870905112495, 53.20898295887287, 53.2092568666208, 53.20953077436872, 53.2070656046374, 53.207339512385325, 53.20761342013325, 53.207887327881174, 53.2081612356291, 53.208435143377024, 53.20870905112495, 53.20898295887287, 53.2092568666208, 53.20953077436872, 53.2070656046374, 53.207339512385325, 53.20761342013325, 53.207887327881174, 53.2081612356291, 53.208435143377024, 53.20870905112495, 53.20898295887287, 53.2092568666208, 53.20953077436872, 53.2070656046374, 53.207339512385325, 53.20761342013325, 53.207887327881174, 53.2081612356291, 53.208435143377024, 53.20870905112495, 53.20898295887287, 53.2092568666208, 53.20953077436872, 53.2070656046374, 53.207339512385325, 53.20761342013325, 53.207887327881174, 53.2081612356291, 53.208435143377024, 53.20870905112495, 53.20898295887287, 53.2092568666208, 53.20953077436872, 53.2070656046374, 53.207339512385325, 53.20761342013325, 53.207887327881174, 53.2081612356291, 53.208435143377024, 53.20870905112495, 53.20898295887287, 53.2092568666208, 53.20953077436872, 53.2070656046374, 53.207339512385325, 53.20761342013325, 53.207887327881174, 53.2081612356291, 53.208435143377024, 53.20870905112495, 53.20898295887287, 53.2092568666208, 53.20953077436872, 53.2070656046374, 53.207339512385325, 53.20761342013325, 53.207887327881174, 53.2081612356291, 53.208435143377024, 53.20870905112495, 53.20898295887287, 53.2092568666208, 53.20953077436872, 53.2070656046374, 53.207339512385325, 53.20761342013325, 53.207887327881174, 53.2081612356291, 53.208435143377024, 53.20870905112495, 53.20898295887287, 53.2092568666208, 53.20953077436872};
        */
        return 1;
    }

    
    std::vector<uint32_t> exec_gpu_pip()
    {  
        //std::vector g_pos_v(h_polygon.group_position,h_polygon.group_position+h_polygon.num_group);
        std::vector<uint32_t> f_pos_v(h_polygon.feature_position,h_polygon.feature_position+h_polygon.num_feature);
        std::vector<uint32_t> r_pos_v(h_polygon.ring_position,h_polygon.ring_position+h_polygon.num_ring);
        std::vector<double> ply_x_v(h_polygon.x,h_polygon.x+h_polygon.num_vertex);
        std::vector<double> ply_y_v(h_polygon.y,h_polygon.y+h_polygon.num_vertex);
        std::vector<double> pnt_x_v(x,x+this->point_len);
        std::vector<double> pnt_y_v(y,y+this->point_len);   
        
        cudf::test::column_wrapper<uint32_t> polygon_fpos_wrapp{f_pos_v};
        cudf::test::column_wrapper<uint32_t> polygon_rpos_wrapp{r_pos_v};
        cudf::test::column_wrapper<double> polygon_x_wrapp{ply_x_v};
        cudf::test::column_wrapper<double> polygon_y_wrapp{ply_y_v};
        cudf::test::column_wrapper<double> point_x_wrapp{pnt_x_v};
        cudf::test::column_wrapper<double> point_y_wrapp{pnt_y_v};
         
        gdf_column res_bm1 = cuspatial::point_in_polygon_bitmap( 
            *(point_x_wrapp.get()), *(point_y_wrapp.get()),
            *(polygon_fpos_wrapp.get()), *(polygon_rpos_wrapp.get()), 
            *(polygon_x_wrapp.get()), *(polygon_y_wrapp.get()) );
    
        std::vector<uint32_t> gpu_pip_res(this->point_len);
    	EXPECT_EQ(cudaMemcpy(gpu_pip_res.data(), res_bm1.data,
                             this->point_len * sizeof(uint32_t),
                             cudaMemcpyDeviceToHost),
                  cudaSuccess);
        return gpu_pip_res;
    }

    void set_finalize()
    {
        delete [] h_polygon.group_length;
        delete [] h_polygon.feature_length;
        delete [] h_polygon.ring_length;
        if(!h_polygon.is_inplace)
        {
            delete [] h_polygon.group_position;
            delete [] h_polygon.feature_position;
            delete [] h_polygon.ring_position;
        }
        delete [] h_polygon.x;
        delete [] h_polygon.y;

        delete[] x;
        delete[] y;
    }
    
};

TEST_F(PIPToy, piptest)
{
    ASSERT_GE(this->set_initialize(), (uint32_t)0);

    std::vector<uint32_t> cpu_pip_res = cpu_pip_loop(this->point_len,
                                                 this->x, this->y,
                                                 this->h_polygon);

    std::vector<uint32_t> gpu_pip_res = this->exec_gpu_pip();
    
    //i=14 cpu=False gpu=1
    //i=36 cpu=False gpu=1
    
    //i=14 gpu=1 cpu=1 gdal=0
    //i=36 gpu=1 cpu=1 gdal=0
    
    uint32_t g_c=0,c_c=0,d_c=0;
    for(uint32_t i=0;i<gpu_pip_res.size();i++)
    {
        if(gpu_pip_res[i]==1) g_c++;
         if(cpu_pip_res[i]==1) c_c++;
        OGRPoint pnt(x[i],y[i]);
        bool gdal_pip=ogr_poly->Contains(&pnt);
        if(gdal_pip==1) d_c++;
        /*if(gpu_pip_res[i]!=cpu_pip_res[i]||gpu_pip_res[i]!=gdal_pip)
            std::cout<<"i="<<i<<" gpu="<<gpu_pip_res[i]<<" cpu="<<gpu_pip_res[i]<<" gdal="<<gdal_pip<<std::endl;*/
        printf("%u, %10.5f, %10.5f, %d,%d,%d\n",i,x[i],y[i], gpu_pip_res[i],cpu_pip_res[i],gdal_pip);
    }
    std::cout<<"g_c="<<g_c<<" c_c="<<c_c<<" gdal="<<d_c<<std::endl;
    //EXPECT_THAT(gpu_pip_res, testing::Eq(cpu_pip_res));

    this->set_finalize();
}
